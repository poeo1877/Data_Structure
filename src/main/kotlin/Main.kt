fun getGraph(): AdjacencyMatrix<String>{
    val graph = AdjacencyMatrix<String>()
    val singapore = graph.createVertex("Singapore")
    val tokyo = graph.createVertex("Tokyo")
    val hongKong = graph.createVertex("Hong Kong")
    val detroit = graph.createVertex("Detroit")
    val sanFranciso = graph.createVertex("San Francisco")
    val washingtonDC = graph.createVertex("Washington DC")
    val austinTexas = graph.createVertex("Ausin Texas")
    val seattle = graph.createVertex("Seattle")
    graph.add(EdgeType.UNDIRECTED,singapore, hongKong, 300.0)
    graph.add(EdgeType.UNDIRECTED,singapore, tokyo, 500.0)
    graph.add(EdgeType.UNDIRECTED,hongKong, tokyo, 250.0)
    graph.add(EdgeType.UNDIRECTED,tokyo, detroit, 450.0)
    graph.add(EdgeType.UNDIRECTED,tokyo, washingtonDC, 300.0)
    graph.add(EdgeType.UNDIRECTED,hongKong, sanFranciso, 600.0)
    graph.add(EdgeType.UNDIRECTED,detroit, austinTexas, 50.0)
    graph.add(EdgeType.UNDIRECTED,austinTexas, washingtonDC, 292.0)
    graph.add(EdgeType.UNDIRECTED,sanFranciso, washingtonDC, 337.0)
    graph.add(EdgeType.UNDIRECTED,washingtonDC, seattle, 218.0)
    graph.add(EdgeType.UNDIRECTED, sanFranciso, seattle, 277.0)
    graph.add(EdgeType.UNDIRECTED,austinTexas, sanFranciso, 297.0)
    return graph
}

fun main(){
    val graph = AdjacencyList<String>()
    val A = graph.createVertex("A"); val B =graph.createVertex("B")
    val C = graph.createVertex("C"); val D = graph.createVertex("D")
    val E = graph.createVertex("E"); val F = graph.createVertex("F")
    val G = graph.createVertex("G"); val H = graph.createVertex("H")
    graph.add(EdgeType.DIRECTED, A, B, 8.0);    graph.add(EdgeType.DIRECTED, A, G, 1.0)
    graph.add(EdgeType.DIRECTED, A, F,9.0 );    graph.add(EdgeType.DIRECTED, A, B, 1.0)
    graph.add(EdgeType.DIRECTED,  B, F, 3.0 );    graph.add(EdgeType.DIRECTED, C, B,3.0 )
    graph.add(EdgeType.DIRECTED, C, E, 1.0 );    graph.add(EdgeType.DIRECTED, E, B,1.0 )
    graph.add(EdgeType.DIRECTED, E, D, 2.0 );    graph.add(EdgeType.DIRECTED, F, A, 2.0 )
    graph.add(EdgeType.DIRECTED, G, C,3.0 );   graph.add(EdgeType.DIRECTED, H, G, 5.0 )
    graph.add(EdgeType.DIRECTED, H,F, 2.0 )
    val dijkstra = Dijkstra(graph)
    val pathsFromA = dijkstra.shortestPath(A)
    val path = dijkstra.shortestPath(D, pathsFromA)
    path.forEach {
        println("${it.source.data} --|${it.weight ?: 0.0}|--> ${it.destination.data}")
    }
}